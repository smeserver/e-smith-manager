diff -Nur -x '*.orig' -x '*.rej' e-smith-manager-1.12.0/root/etc/e-smith/events/actions/navigation-conf mezzanine_patched_e-smith-manager-1.12.0/root/etc/e-smith/events/actions/navigation-conf
--- e-smith-manager-1.12.0/root/etc/e-smith/events/actions/navigation-conf	2003-03-19 08:53:27.000000000 -0700
+++ mezzanine_patched_e-smith-manager-1.12.0/root/etc/e-smith/events/actions/navigation-conf	2007-01-17 07:36:17.000000000 -0700
@@ -1,7 +1,7 @@
 #!/usr/bin/perl -w
 
 #----------------------------------------------------------------------
-# copyright (C) 1999-2003 Mitel Networks Corporation
+# copyright (C) 1999-2006 Mitel Networks Corporation
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -17,94 +17,116 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 # 
-# Technical support for this program is available from Mitel Networks 
-# Please visit our web site www.mitel.com/sme/ for details.
 #----------------------------------------------------------------------
 package esmith;
 
 use strict;
 
 use esmith::ConfigDB;
-use esmith::FormMagick;
 use esmith::I18N;
 
+use constant WEBFUNCTIONS => '/etc/e-smith/web/functions';
+use constant NAVIGATIONDIR => '/home/e-smith/db/navigation';
+use constant NEW_NAVDIR => '/home/e-smith/db';
+
 my $navigation_ignore = 
     "(\.\.?|navigation|noframes|online-manual|(internal|pleasewait)(-.*)?)";
 
 my $i18n = new esmith::I18N;
 
-foreach my $lang ( $i18n->availableLanguages() )
-{
-    use constant WEBFUNCTIONS => '/etc/e-smith/web/functions';
-    use constant NAVIGATIONDIR => '/home/e-smith/db/navigation';
+my %navdbs;
 
-    opendir FUNCTIONS, WEBFUNCTIONS or 
-	die "Couldn't open ", WEBFUNCTIONS, "\n";
+opendir FUNCTIONS, WEBFUNCTIONS or 
+    die "Couldn't open ", WEBFUNCTIONS, "\n";
 
-    my @files = grep (!/^${navigation_ignore}$/, readdir (FUNCTIONS));
-	
-    my $navinfo = NAVIGATIONDIR . "/navigation.$lang";
+my @files = grep (!/^${navigation_ignore}$/, readdir (FUNCTIONS));
+my @langs = $i18n->availableLanguages(); 
 
-    system ("/bin/touch", $navinfo);
+use XML::Parser;
+my $parser = new XML::Parser (Style => 'Tree',
+      ProtocolEncoding => 'ISO-8859-1');
 
-    my $navdb = esmith::ConfigDB->open($navinfo) or 
-	die "Couldn't open $navinfo\n";
+foreach my $file (@files)
+{
+    next if (-d WEBFUNCTIONS . "/$file");
+    next unless (-x WEBFUNCTIONS . "/$file");
 
-    foreach my $file (@files)
+    #-------------------------------------------------- 
+    # extract heading, description and weight information
+    # from CGI script
+    #-------------------------------------------------- 
+    open(SCRIPT, WEBFUNCTIONS . "/$file");
+    my $heading            = undef;
+    my $description        = undef;
+    my $heading_weight     = undef;
+    my $description_weight = undef;
+    while ( <SCRIPT> )
     {
-	next if (-d WEBFUNCTIONS . "/$file");
-	next unless (-x WEBFUNCTIONS . "/$file");
-
-	my $rec = $navdb->get($file) || 
-		$navdb->new_record($file, { type => 'panel' } );
+	$heading = $1 if (/^\s*#\s*heading\s*:\s*(.+?)\s*$/);
 
-	#-------------------------------------------------- 
-	# extract heading, description and weight information
-	# from CGI script
-	#-------------------------------------------------- 
-	$ENV{'HTTP_ACCEPT_LANGUAGE'} = $lang;
+	$description = $1 
+	    if (/^\s*#\s*description\s*:\s*(.+?)\s*$/);
 
-	# trick esmith::FormMagick into thinking we are the panel
-	local $0 = WEBFUNCTIONS . "/$file";
+	($heading_weight, $description_weight) = ($1, $2) 
+	    if (/^\s*#\s*navigation\s*:\s*(\d+?)\s+(\d+?)\s*$/);
 
-	open(main::DATA, $0);
+	last if (defined $heading and 
+	    defined $description and
+	    defined $heading_weight and
+	    defined $description_weight);
+    }
+    close SCRIPT;
+    foreach my $lang (@langs)
+    {
+#warn "updating script $file for lang $lang\n";
+	my $navdb = $navdbs{$lang};
+	my $navinfo = NAVIGATIONDIR . "/navigation.$lang";
+	$navdb ||= esmith::ConfigDB->open($navinfo);
+	$navdb ||= esmith::ConfigDB->create($navinfo) or 
+	    die "Couldn't create $navinfo\n";
+        $navdbs{$lang} ||= $navdb;
+	my $rec = $navdb->get($file) || 
+	    $navdb->new_record($file, { type => 'panel' } );
 
-	while ( <main::DATA> )
-	{
-	    last if /^__DATA__/;
-	}
+	my $lexicon = {};
 
-	#-------------------------------------------------- 
-	# If an FM subclass for this panel exists, lets try to 
-	# instantiate it.  Otherwise, we'll just instantiate an
-	# esmith::FormMagick object.
-	#-------------------------------------------------- 
-
-	my $fm;
-	eval "use esmith::FormMagick::Panel::${file} ()";
-	unless ($?)
-	{
-	    $fm = eval "esmith::FormMagick::Panel::${file}->new()";
-	}
-	unless (defined $fm)
+	my $lfile = "/etc/e-smith/locale/$lang/etc/e-smith/web/functions/$file";
+	if (-f $lfile)
 	{
-	    $fm = esmith::FormMagick->new();
-	}
-	
-	#-------------------------------------------------- 
-	# parse_xml() will not be happy if this is not in fact
-        # a FormMagick panel and thus doesn't have a __DATA_ section
-	#-------------------------------------------------- 
-	my $parse_result = eval { $fm->parse_xml(); };
-
+	    # Do a quick and dirty parse of the lexicon file
+	    my $xml = $parser->parsefile($lfile);
+	    my @lexicon = @{$xml->[1]};
+	    shift @lexicon; # Remove lexicon attributes
+	    while (@lexicon)
+	    {
+		my ($tag, $data) = splice(@lexicon, 0, 2);
+		next unless $tag eq 'entry';
+		my %entry_hash = ('attributes', @$data);
+		my $base = $entry_hash{base};
+		$base = @{$base}[2];
+		my $trans = $entry_hash{trans};
+		$trans = @{$trans}[2];
+		next unless defined $base && defined $trans;
+		$lexicon->{$base} = $trans;
+	    }
+         }
 	$rec->merge_props(
-		Heading => $fm->heading,
-		Description => $fm->description,
-		HeadingWeight => $fm->heading_weight,
-		DescriptionWeight => $fm->description_weight);
+	    Heading => localise($lexicon, $heading),
+	    Description => localise($lexicon, $description),
+	    HeadingWeight => localise($lexicon, $heading_weight),
+	    DescriptionWeight => localise($lexicon, $description_weight));
     }
-
+}
+foreach my $lang (@langs)
+{
+#warn "trying to close for lang $lang\n";
+    my $navdb = $navdbs{$lang};
     $navdb->close();
+}
 
-    chmod 0644, $navinfo;
+sub localise {
+    my ($lexicon, $string) = @_;
+    $string  = "" unless defined $string;
+    return $lexicon->{$string} || $string;
 }
+
